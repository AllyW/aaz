<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/certificates/{}" version="2022-08-01" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NlcnRpZmljYXRlcy97Y2VydGlmaWNhdGVOYW1lfQ==/V/MjAyMi0wOC0wMQ=="/>
  <commandGroup name="nginx deployment certificate">
    <command name="show" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/certificates/{}" version="2022-08-01" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NlcnRpZmljYXRlcy97Y2VydGlmaWNhdGVOYW1lfQ==/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.certificateName" options="certificate-name name n" required="True" idPart="child_name_1">
          <help short="The name of certificate"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Certificates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/certificates/{certificateName}">
          <request method="get">
            <path>
              <param type="string" name="certificateName" arg="$Path.certificateName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/certificates/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="string" name="certificateVirtualPath"/>
                    <prop type="string" name="keyVaultSecretId"/>
                    <prop type="string" name="keyVirtualPath"/>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop readOnly="True" type="string" name="createdBy"/>
                    <prop readOnly="True" type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="lastModifiedAt"/>
                    <prop readOnly="True" type="string" name="lastModifiedBy"/>
                    <prop readOnly="True" type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="create" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/certificates/{}" version="2022-08-01" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NlcnRpZmljYXRlcy97Y2VydGlmaWNhdGVOYW1lfQ==/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.certificateName" options="certificate-name name n" required="True" idPart="child_name_1">
          <help short="The name of certificate"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Body">
        <arg type="ResourceLocation" var="$body.location" options="location l" group="Body"/>
        <arg type="object" var="$body.tags" options="tags" group="Body">
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$body.properties.certificateVirtualPath" options="certificate-path" group="Properties">
          <help short="Certificate path in Nginx configuration structure" lines="This path must match one or more ssl_certificate directive file argument in your Nginx configuration. This path must be unique between certificates within the same deployment"/>
        </arg>
        <arg type="string" var="$body.properties.keyVaultSecretId" options="key-vault-secret-id" group="Properties">
          <help short="The secret ID for your certificate from Azure Key Vault"/>
        </arg>
        <arg type="string" var="$body.properties.keyVirtualPath" options="key-path" group="Properties">
          <help short="Key path in Nginx configuration structure" lines="This path must match one or more ssl_certificate_key directive file argument in your Nginx configuration. This path must be unique between certificates within the same deployment"/>
        </arg>
        <arg type="string" var="$body.properties.provisioningState" options="provisioning-state" hide="True" group="Properties">
          <help short="State of certificate"/>
          <enum>
            <item name="Accepted" value="&quot;Accepted&quot;"/>
            <item name="Canceled" value="&quot;Canceled&quot;"/>
            <item name="Creating" value="&quot;Creating&quot;"/>
            <item name="Deleted" value="&quot;Deleted&quot;"/>
            <item name="Deleting" value="&quot;Deleting&quot;"/>
            <item name="Failed" value="&quot;Failed&quot;"/>
            <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
            <item name="Succeeded" value="&quot;Succeeded&quot;"/>
            <item name="Updating" value="&quot;Updating&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Certificates_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/certificates/{certificateName}">
          <request method="put">
            <path>
              <param type="string" name="certificateName" arg="$Path.certificateName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <body>
              <json>
                <schema type="object" name="body" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$body.location"/>
                  <prop type="object" name="properties">
                    <prop type="string" name="certificateVirtualPath" arg="$body.properties.certificateVirtualPath"/>
                    <prop type="string" name="keyVaultSecretId" arg="$body.properties.keyVaultSecretId"/>
                    <prop type="string" name="keyVirtualPath" arg="$body.properties.keyVirtualPath"/>
                    <prop type="string" name="provisioningState" arg="$body.properties.provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$body.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/certificates/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="string" name="certificateVirtualPath"/>
                    <prop type="string" name="keyVaultSecretId"/>
                    <prop type="string" name="keyVirtualPath"/>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop readOnly="True" type="string" name="createdBy"/>
                    <prop readOnly="True" type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="lastModifiedAt"/>
                    <prop readOnly="True" type="string" name="lastModifiedBy"/>
                    <prop readOnly="True" type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/certificates/{}" version="2022-08-01" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NlcnRpZmljYXRlcy97Y2VydGlmaWNhdGVOYW1lfQ==/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.certificateName" options="certificate-name name n" required="True" idPart="child_name_1">
          <help short="The name of certificate"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Body">
        <arg nullable="True" type="ResourceLocation" var="$body.location" options="location l" group="Body"/>
        <arg nullable="True" type="object" var="$body.tags" options="tags" group="Body">
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$body.properties.certificateVirtualPath" options="certificate-virtual-path" group="Properties"/>
        <arg nullable="True" type="string" var="$body.properties.keyVaultSecretId" options="key-vault-secret-id" group="Properties"/>
        <arg nullable="True" type="string" var="$body.properties.keyVirtualPath" options="key-virtual-path" group="Properties"/>
        <arg nullable="True" type="string" var="$body.properties.provisioningState" options="provisioning-state" hide="True" group="Properties">
          <help short="State of certificate"/>
          <enum>
            <item name="Accepted" value="&quot;Accepted&quot;"/>
            <item name="Canceled" value="&quot;Canceled&quot;"/>
            <item name="Creating" value="&quot;Creating&quot;"/>
            <item name="Deleted" value="&quot;Deleted&quot;"/>
            <item name="Deleting" value="&quot;Deleting&quot;"/>
            <item name="Failed" value="&quot;Failed&quot;"/>
            <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
            <item name="Succeeded" value="&quot;Succeeded&quot;"/>
            <item name="Updating" value="&quot;Updating&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Certificates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/certificates/{certificateName}">
          <request method="get">
            <path>
              <param type="string" name="certificateName" arg="$Path.certificateName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="NginxCertificate_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/certificates/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="string" name="certificateVirtualPath"/>
                    <prop type="string" name="keyVaultSecretId"/>
                    <prop type="string" name="keyVirtualPath"/>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop readOnly="True" type="string" name="createdBy"/>
                    <prop readOnly="True" type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="lastModifiedAt"/>
                    <prop readOnly="True" type="string" name="lastModifiedBy"/>
                    <prop readOnly="True" type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate instance="$Instance">
          <json>
            <schema type="object" name="body" clientFlatten="True">
              <prop type="ResourceLocation" name="location" arg="$body.location"/>
              <prop type="object" name="properties">
                <prop type="string" name="certificateVirtualPath" arg="$body.properties.certificateVirtualPath"/>
                <prop type="string" name="keyVaultSecretId" arg="$body.properties.keyVaultSecretId"/>
                <prop type="string" name="keyVirtualPath" arg="$body.properties.keyVirtualPath"/>
                <prop type="string" name="provisioningState" arg="$body.properties.provisioningState">
                  <enum>
                    <item value="&quot;Accepted&quot;"/>
                    <item value="&quot;Canceled&quot;"/>
                    <item value="&quot;Creating&quot;"/>
                    <item value="&quot;Deleted&quot;"/>
                    <item value="&quot;Deleting&quot;"/>
                    <item value="&quot;Failed&quot;"/>
                    <item value="&quot;NotSpecified&quot;"/>
                    <item value="&quot;Succeeded&quot;"/>
                    <item value="&quot;Updating&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$body.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Certificates_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/certificates/{certificateName}">
          <request method="put">
            <path>
              <param type="string" name="certificateName" arg="$Path.certificateName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@NginxCertificate_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-08-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/certificates/{}" version="2022-08-01" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NlcnRpZmljYXRlcy97Y2VydGlmaWNhdGVOYW1lfQ==/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.certificateName" options="certificate-name name n" required="True" idPart="child_name_1">
          <help short="The name of certificate"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Certificates_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/certificates/{certificateName}">
          <request method="delete">
            <path>
              <param type="string" name="certificateName" arg="$Path.certificateName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
  </commandGroup>
</CodeGen>
