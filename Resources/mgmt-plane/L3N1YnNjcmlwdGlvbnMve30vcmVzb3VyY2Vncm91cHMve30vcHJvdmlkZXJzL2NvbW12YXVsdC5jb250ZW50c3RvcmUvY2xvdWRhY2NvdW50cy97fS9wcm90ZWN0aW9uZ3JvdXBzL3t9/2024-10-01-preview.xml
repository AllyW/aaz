<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/commvault.contentstore/cloudaccounts/{}/protectiongroups/{}" version="2024-10-01-preview" swagger="mgmt-plane/liftrcommvault/ResourceProviders/Commvault.ContentStore/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9Db21tdmF1bHQuQ29udGVudFN0b3JlL2Nsb3VkQWNjb3VudHMve2Nsb3VkQWNjb3VudE5hbWV9L3Byb3RlY3Rpb25Hcm91cHMve3Byb3RlY3Rpb25Hcm91cE5hbWV9/V/MjAyNC0xMC0wMS1wcmV2aWV3"/>
  <commandGroup name="commvault content-store cloud-account protection-group">
    <command name="show" version="2024-10-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/commvault.contentstore/cloudaccounts/{}/protectiongroups/{}" version="2024-10-01-preview" swagger="mgmt-plane/liftrcommvault/ResourceProviders/Commvault.ContentStore/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9Db21tdmF1bHQuQ29udGVudFN0b3JlL2Nsb3VkQWNjb3VudHMve2Nsb3VkQWNjb3VudE5hbWV9L3Byb3RlY3Rpb25Hcm91cHMve3Byb3RlY3Rpb25Hcm91cE5hbWV9/V/MjAyNC0xMC0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.cloudAccountName" options="cloud-account-name" required="True" idPart="name">
          <help short="Name of the Cloud Account resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.protectionGroupName" options="protection-group-name name n" required="True" idPart="child_name_1">
          <help short="Name of the ProtectionGroup resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="ProtectionGroups_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Commvault.ContentStore/cloudAccounts/{cloudAccountName}/protectionGroups/{protectionGroupName}">
          <request method="get">
            <path>
              <param type="string" name="cloudAccountName" arg="$Path.cloudAccountName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="protectionGroupName" arg="$Path.protectionGroupName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-10-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="integer64" name="lastBackUpTime"/>
                    <prop readOnly="True" type="integer32" name="numberOfProtectedItems"/>
                    <prop type="string" name="plan" required="True"/>
                    <prop readOnly="True" type="string" name="protectionStatus">
                      <enum>
                        <item value="&quot;all&quot;"/>
                        <item value="&quot;backed_up_with_error&quot;"/>
                        <item value="&quot;discovered&quot;"/>
                        <item value="&quot;not_protected&quot;"/>
                        <item value="&quot;pending&quot;"/>
                        <item value="&quot;protected&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="resources" required="True">
                      <prop type="array<string>" name="manual">
                        <item type="string"/>
                      </prop>
                      <prop type="object" name="matchRules">
                        <prop type="string" name="matchType" required="True">
                          <enum>
                            <item value="&quot;all&quot;"/>
                            <item value="&quot;any&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<object>" name="rules" required="True">
                          <item type="object">
                            <prop type="string" name="operator" required="True">
                              <enum>
                                <item value="&quot;contains&quot;"/>
                                <item value="&quot;doesNotContains&quot;"/>
                                <item value="&quot;doesNotEqual&quot;"/>
                                <item value="&quot;endsWith&quot;"/>
                                <item value="&quot;equals&quot;"/>
                                <item value="&quot;startsWith&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="property" required="True">
                              <enum>
                                <item value="&quot;name&quot;"/>
                                <item value="&quot;region&quot;"/>
                                <item value="&quot;resourceGroup&quot;"/>
                                <item value="&quot;status&quot;"/>
                                <item value="&quot;tagName&quot;"/>
                                <item value="&quot;tagValue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="value" required="True"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema readOnly="True" type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-10-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/commvault.contentstore/cloudaccounts/{}/protectiongroups/{}" version="2024-10-01-preview" swagger="mgmt-plane/liftrcommvault/ResourceProviders/Commvault.ContentStore/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9Db21tdmF1bHQuQ29udGVudFN0b3JlL2Nsb3VkQWNjb3VudHMve2Nsb3VkQWNjb3VudE5hbWV9L3Byb3RlY3Rpb25Hcm91cHMve3Byb3RlY3Rpb25Hcm91cE5hbWV9/V/MjAyNC0xMC0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.cloudAccountName" options="cloud-account-name" required="True" idPart="name">
          <help short="Name of the Cloud Account resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.protectionGroupName" options="protection-group-name name n" required="True" idPart="child_name_1">
          <help short="Name of the ProtectionGroup resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="ProtectionGroups_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Commvault.ContentStore/cloudAccounts/{cloudAccountName}/protectionGroups/{protectionGroupName}">
          <request method="delete">
            <path>
              <param type="string" name="cloudAccountName" arg="$Path.cloudAccountName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="protectionGroupName" arg="$Path.protectionGroupName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-10-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="202">
            <header>
              <item name="Location"/>
              <item name="Retry-After"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema readOnly="True" type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-10-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/commvault.contentstore/cloudaccounts/{}/protectiongroups/{}" version="2024-10-01-preview" swagger="mgmt-plane/liftrcommvault/ResourceProviders/Commvault.ContentStore/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9Db21tdmF1bHQuQ29udGVudFN0b3JlL2Nsb3VkQWNjb3VudHMve2Nsb3VkQWNjb3VudE5hbWV9L3Byb3RlY3Rpb25Hcm91cHMve3Byb3RlY3Rpb25Hcm91cE5hbWV9/V/MjAyNC0xMC0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.cloudAccountName" options="cloud-account-name" required="True" idPart="name">
          <help short="Name of the Cloud Account resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.protectionGroupName" options="protection-group-name name n" required="True" idPart="child_name_1">
          <help short="Name of the ProtectionGroup resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$resource.properties.plan" options="plan" group="Properties">
          <help short="The Commvault Plan to be associated with the Protection Group"/>
        </arg>
        <arg type="object" var="$resource.properties.resources" options="resources" group="Properties">
          <help short="The resources to be protected under Protection Group"/>
          <arg type="array<string>" var="$resource.properties.resources.manual" options="manual">
            <help short="The items to be protected under Protection Group"/>
            <item type="string"/>
          </arg>
          <arg type="object" var="$resource.properties.resources.matchRules" options="match-rules">
            <help short="Rules to match resources"/>
            <arg type="string" var="$resource.properties.resources.matchRules.matchType" options="match-type" required="True">
              <help short="match Type all or any"/>
              <enum>
                <item name="all" value="&quot;all&quot;"/>
                <item name="any" value="&quot;any&quot;"/>
              </enum>
            </arg>
            <arg type="array<object>" var="$resource.properties.resources.matchRules.rules" options="rules" required="True">
              <help short="rules to match"/>
              <item type="object">
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].operator" options="operator" required="True">
                  <help short="property of the rule"/>
                  <enum>
                    <item name="contains" value="&quot;contains&quot;"/>
                    <item name="doesNotContains" value="&quot;doesNotContains&quot;"/>
                    <item name="doesNotEqual" value="&quot;doesNotEqual&quot;"/>
                    <item name="endsWith" value="&quot;endsWith&quot;"/>
                    <item name="equals" value="&quot;equals&quot;"/>
                    <item name="startsWith" value="&quot;startsWith&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].property" options="property" required="True">
                  <help short="property of the rule"/>
                  <enum>
                    <item name="name" value="&quot;name&quot;"/>
                    <item name="region" value="&quot;region&quot;"/>
                    <item name="resourceGroup" value="&quot;resourceGroup&quot;"/>
                    <item name="status" value="&quot;status&quot;"/>
                    <item name="tagName" value="&quot;tagName&quot;"/>
                    <item name="tagValue" value="&quot;tagValue&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].value" options="value" required="True">
                  <help short="property of the rule"/>
                </arg>
              </item>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="ProtectionGroups_CreateOrupdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Commvault.ContentStore/cloudAccounts/{cloudAccountName}/protectionGroups/{protectionGroupName}">
          <request method="put">
            <path>
              <param type="string" name="cloudAccountName" arg="$Path.cloudAccountName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="protectionGroupName" arg="$Path.protectionGroupName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-10-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="resource" required="True" clientFlatten="True">
                  <prop type="object" name="properties">
                    <prop type="string" name="plan" arg="$resource.properties.plan" required="True"/>
                    <prop type="object" name="resources" arg="$resource.properties.resources" required="True">
                      <prop type="array<string>" name="manual" arg="$resource.properties.resources.manual">
                        <item type="string"/>
                      </prop>
                      <prop type="object" name="matchRules" arg="$resource.properties.resources.matchRules">
                        <prop type="string" name="matchType" arg="$resource.properties.resources.matchRules.matchType" required="True">
                          <enum>
                            <item value="&quot;all&quot;"/>
                            <item value="&quot;any&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<object>" name="rules" arg="$resource.properties.resources.matchRules.rules" required="True">
                          <item type="object">
                            <prop type="string" name="operator" arg="$resource.properties.resources.matchRules.rules[].operator" required="True">
                              <enum>
                                <item value="&quot;contains&quot;"/>
                                <item value="&quot;doesNotContains&quot;"/>
                                <item value="&quot;doesNotEqual&quot;"/>
                                <item value="&quot;endsWith&quot;"/>
                                <item value="&quot;equals&quot;"/>
                                <item value="&quot;startsWith&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="property" arg="$resource.properties.resources.matchRules.rules[].property" required="True">
                              <enum>
                                <item value="&quot;name&quot;"/>
                                <item value="&quot;region&quot;"/>
                                <item value="&quot;resourceGroup&quot;"/>
                                <item value="&quot;status&quot;"/>
                                <item value="&quot;tagName&quot;"/>
                                <item value="&quot;tagValue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="value" arg="$resource.properties.resources.matchRules.rules[].value" required="True"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="integer64" name="lastBackUpTime"/>
                    <prop readOnly="True" type="integer32" name="numberOfProtectedItems"/>
                    <prop type="string" name="plan" required="True"/>
                    <prop readOnly="True" type="string" name="protectionStatus">
                      <enum>
                        <item value="&quot;all&quot;"/>
                        <item value="&quot;backed_up_with_error&quot;"/>
                        <item value="&quot;discovered&quot;"/>
                        <item value="&quot;not_protected&quot;"/>
                        <item value="&quot;pending&quot;"/>
                        <item value="&quot;protected&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="resources" required="True">
                      <prop type="array<string>" name="manual">
                        <item type="string"/>
                      </prop>
                      <prop type="object" name="matchRules">
                        <prop type="string" name="matchType" required="True">
                          <enum>
                            <item value="&quot;all&quot;"/>
                            <item value="&quot;any&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<object>" name="rules" required="True">
                          <item type="object">
                            <prop type="string" name="operator" required="True">
                              <enum>
                                <item value="&quot;contains&quot;"/>
                                <item value="&quot;doesNotContains&quot;"/>
                                <item value="&quot;doesNotEqual&quot;"/>
                                <item value="&quot;endsWith&quot;"/>
                                <item value="&quot;equals&quot;"/>
                                <item value="&quot;startsWith&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="property" required="True">
                              <enum>
                                <item value="&quot;name&quot;"/>
                                <item value="&quot;region&quot;"/>
                                <item value="&quot;resourceGroup&quot;"/>
                                <item value="&quot;status&quot;"/>
                                <item value="&quot;tagName&quot;"/>
                                <item value="&quot;tagValue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="value" required="True"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema readOnly="True" type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-10-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/commvault.contentstore/cloudaccounts/{}/protectiongroups/{}" version="2024-10-01-preview" swagger="mgmt-plane/liftrcommvault/ResourceProviders/Commvault.ContentStore/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9Db21tdmF1bHQuQ29udGVudFN0b3JlL2Nsb3VkQWNjb3VudHMve2Nsb3VkQWNjb3VudE5hbWV9L3Byb3RlY3Rpb25Hcm91cHMve3Byb3RlY3Rpb25Hcm91cE5hbWV9/V/MjAyNC0xMC0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.cloudAccountName" options="cloud-account-name" required="True" idPart="name">
          <help short="Name of the Cloud Account resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.protectionGroupName" options="protection-group-name name n" required="True" idPart="child_name_1">
          <help short="Name of the ProtectionGroup resource"/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$resource.properties.plan" options="plan" group="Properties">
          <help short="The Commvault Plan to be associated with the Protection Group"/>
        </arg>
        <arg type="object" var="$resource.properties.resources" options="resources" group="Properties">
          <help short="The resources to be protected under Protection Group"/>
          <arg nullable="True" type="array<string>" var="$resource.properties.resources.manual" options="manual">
            <help short="The items to be protected under Protection Group"/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="object" var="$resource.properties.resources.matchRules" options="match-rules">
            <help short="Rules to match resources"/>
            <arg type="string" var="$resource.properties.resources.matchRules.matchType" options="match-type">
              <help short="match Type all or any"/>
              <enum>
                <item name="all" value="&quot;all&quot;"/>
                <item name="any" value="&quot;any&quot;"/>
              </enum>
            </arg>
            <arg type="array<object>" var="$resource.properties.resources.matchRules.rules" options="rules">
              <help short="rules to match"/>
              <item nullable="True" type="object">
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].operator" options="operator">
                  <help short="property of the rule"/>
                  <enum>
                    <item name="contains" value="&quot;contains&quot;"/>
                    <item name="doesNotContains" value="&quot;doesNotContains&quot;"/>
                    <item name="doesNotEqual" value="&quot;doesNotEqual&quot;"/>
                    <item name="endsWith" value="&quot;endsWith&quot;"/>
                    <item name="equals" value="&quot;equals&quot;"/>
                    <item name="startsWith" value="&quot;startsWith&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].property" options="property">
                  <help short="property of the rule"/>
                  <enum>
                    <item name="name" value="&quot;name&quot;"/>
                    <item name="region" value="&quot;region&quot;"/>
                    <item name="resourceGroup" value="&quot;resourceGroup&quot;"/>
                    <item name="status" value="&quot;status&quot;"/>
                    <item name="tagName" value="&quot;tagName&quot;"/>
                    <item name="tagValue" value="&quot;tagValue&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$resource.properties.resources.matchRules.rules[].value" options="value">
                  <help short="property of the rule"/>
                </arg>
              </item>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="ProtectionGroups_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Commvault.ContentStore/cloudAccounts/{cloudAccountName}/protectionGroups/{protectionGroupName}">
          <request method="get">
            <path>
              <param type="string" name="cloudAccountName" arg="$Path.cloudAccountName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="protectionGroupName" arg="$Path.protectionGroupName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-10-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="integer64" name="lastBackUpTime"/>
                    <prop readOnly="True" type="integer32" name="numberOfProtectedItems"/>
                    <prop type="string" name="plan" required="True"/>
                    <prop readOnly="True" type="string" name="protectionStatus">
                      <enum>
                        <item value="&quot;all&quot;"/>
                        <item value="&quot;backed_up_with_error&quot;"/>
                        <item value="&quot;discovered&quot;"/>
                        <item value="&quot;not_protected&quot;"/>
                        <item value="&quot;pending&quot;"/>
                        <item value="&quot;protected&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="resources" required="True">
                      <prop type="array<string>" name="manual">
                        <item type="string"/>
                      </prop>
                      <prop type="object" name="matchRules">
                        <prop type="string" name="matchType" required="True">
                          <enum>
                            <item value="&quot;all&quot;"/>
                            <item value="&quot;any&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<object>" name="rules" required="True">
                          <item type="object">
                            <prop type="string" name="operator" required="True">
                              <enum>
                                <item value="&quot;contains&quot;"/>
                                <item value="&quot;doesNotContains&quot;"/>
                                <item value="&quot;doesNotEqual&quot;"/>
                                <item value="&quot;endsWith&quot;"/>
                                <item value="&quot;equals&quot;"/>
                                <item value="&quot;startsWith&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="property" required="True">
                              <enum>
                                <item value="&quot;name&quot;"/>
                                <item value="&quot;region&quot;"/>
                                <item value="&quot;resourceGroup&quot;"/>
                                <item value="&quot;status&quot;"/>
                                <item value="&quot;tagName&quot;"/>
                                <item value="&quot;tagValue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="value" required="True"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema readOnly="True" type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="resource" required="True" clientFlatten="True">
              <prop type="object" name="properties">
                <prop type="string" name="plan" arg="$resource.properties.plan" required="True"/>
                <prop type="object" name="resources" arg="$resource.properties.resources" required="True">
                  <prop type="array<string>" name="manual" arg="$resource.properties.resources.manual">
                    <item type="string"/>
                  </prop>
                  <prop type="object" name="matchRules" arg="$resource.properties.resources.matchRules">
                    <prop type="string" name="matchType" arg="$resource.properties.resources.matchRules.matchType" required="True">
                      <enum>
                        <item value="&quot;all&quot;"/>
                        <item value="&quot;any&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<object>" name="rules" arg="$resource.properties.resources.matchRules.rules" required="True">
                      <item type="object">
                        <prop type="string" name="operator" arg="$resource.properties.resources.matchRules.rules[].operator" required="True">
                          <enum>
                            <item value="&quot;contains&quot;"/>
                            <item value="&quot;doesNotContains&quot;"/>
                            <item value="&quot;doesNotEqual&quot;"/>
                            <item value="&quot;endsWith&quot;"/>
                            <item value="&quot;equals&quot;"/>
                            <item value="&quot;startsWith&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="property" arg="$resource.properties.resources.matchRules.rules[].property" required="True">
                          <enum>
                            <item value="&quot;name&quot;"/>
                            <item value="&quot;region&quot;"/>
                            <item value="&quot;resourceGroup&quot;"/>
                            <item value="&quot;status&quot;"/>
                            <item value="&quot;tagName&quot;"/>
                            <item value="&quot;tagValue&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="value" arg="$resource.properties.resources.matchRules.rules[].value" required="True"/>
                      </item>
                    </prop>
                  </prop>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="ProtectionGroups_CreateOrupdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Commvault.ContentStore/cloudAccounts/{cloudAccountName}/protectionGroups/{protectionGroupName}">
          <request method="put">
            <path>
              <param type="string" name="cloudAccountName" arg="$Path.cloudAccountName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="protectionGroupName" arg="$Path.protectionGroupName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9_\-.: ]*$" maxLength="50" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-10-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="integer64" name="lastBackUpTime"/>
                    <prop readOnly="True" type="integer32" name="numberOfProtectedItems"/>
                    <prop type="string" name="plan" required="True"/>
                    <prop readOnly="True" type="string" name="protectionStatus">
                      <enum>
                        <item value="&quot;all&quot;"/>
                        <item value="&quot;backed_up_with_error&quot;"/>
                        <item value="&quot;discovered&quot;"/>
                        <item value="&quot;not_protected&quot;"/>
                        <item value="&quot;pending&quot;"/>
                        <item value="&quot;protected&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="resources" required="True">
                      <prop type="array<string>" name="manual">
                        <item type="string"/>
                      </prop>
                      <prop type="object" name="matchRules">
                        <prop type="string" name="matchType" required="True">
                          <enum>
                            <item value="&quot;all&quot;"/>
                            <item value="&quot;any&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<object>" name="rules" required="True">
                          <item type="object">
                            <prop type="string" name="operator" required="True">
                              <enum>
                                <item value="&quot;contains&quot;"/>
                                <item value="&quot;doesNotContains&quot;"/>
                                <item value="&quot;doesNotEqual&quot;"/>
                                <item value="&quot;endsWith&quot;"/>
                                <item value="&quot;equals&quot;"/>
                                <item value="&quot;startsWith&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="property" required="True">
                              <enum>
                                <item value="&quot;name&quot;"/>
                                <item value="&quot;region&quot;"/>
                                <item value="&quot;resourceGroup&quot;"/>
                                <item value="&quot;status&quot;"/>
                                <item value="&quot;tagName&quot;"/>
                                <item value="&quot;tagValue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="value" required="True"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema readOnly="True" type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
